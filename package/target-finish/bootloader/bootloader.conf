#!/bin/bash

mainfunction="bootloader_mainfunction"

bootloader_mainfunction ()
{

if [ "$ROCK_BUILD_TARGET" != 1 ] ; then
	echo "$xpkg can only be built with ./scripts/Build-Target!"
	false
fi

rootdir="$root"
build_rock="$root/ROCK"
disksdir="$build_rock/target"

tmpdir="$( mktemp -d )" ; mkdir -p "$tmpdir"
pkg_suffix=.no_binpkg
if [ "$ROCKCFG_CREATE_TARBZ2" == 1 ] ; then
	pkg_suffix='.tar.bz2'
	install_pkg() { eval tar $taropt $1 || true ; }
elif [ "$ROCKCFG_CREATE_GEM" == 1 ] ; then
	pkg_suffix='.gem'
	install_pkg() { eval mine -if -R . $1 || true ; }
fi

if [ "$ROCKCFG_PKGFILE_VER" == 1 ] ; then
	pkg_suffix='-$pkg_ver-$pkg_extraver'$pkg_suffix
fi

if [ -f $confdir/$arch/build.sh ]; then
	. $confdir/$arch/build.sh
fi

echo "Creating ISO filesystem description."
cd $disksdir; rm -rf isofs; mkdir -p isofs

echo "Creating isofs directory.."
ln 2nd_stage.tar.gz 2nd_stage_small.tar.gz isofs/
ln *.img $ROCKCFG_PKG_1ST_STAGE_INITRD.gz isofs/ 2>/dev/null || true # might not exist on some architectures

echo "Creating isofs.txt file .."
echo "DISK1	build/${ROCKCFG_ID}/ROCK/target/isofs/ `
	`${ROCKCFG_SHORTID}/" > $build_rock/isofs_bootdisk.txt

rm -rf "$tmpdir"
}
