--- ./src/string_util.cpp.vanilla	2005-02-27 18:22:19.729140224 +0100
+++ ./src/string_util.cpp	2005-02-27 18:23:49.767452320 +0100
@@ -21,6 +21,7 @@
 
 #include "debug.h"
 #include "error_util.h"
+#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
@@ -29,7 +30,7 @@
 {
     char *dest;
 
-    check_assertion( src != NULL, "string NULL in string_copy" );
+ //   check_assertion( src != NULL, "string NULL in string_copy" );
 
     dest = (char *) malloc( sizeof(char) * ( strlen( src ) + 1 ) );
 
--- ./src/phys_sim.cpp.vanilla	2005-02-27 18:16:20.635730720 +0100
+++ ./src/phys_sim.cpp	2005-02-27 18:16:47.150699832 +0100
@@ -1381,9 +1381,10 @@
 	if ( fabs( fric_f_mag * sin( ANGLES_TO_RADIANS( steer_angle ) ) ) >
 	     MAX_TURN_PERPENDICULAR_FORCE ) 
 	{
-	    check_assertion( fabs( plyr->control.turn_fact ) > 0,
+	    /*check_assertion( fabs( plyr->control.turn_fact ) > 0,
 			     "steer angle is non-zero when player is not "
 			     "turning" );
+		*/	
 	    steer_angle = RADIANS_TO_ANGLES( 
 		asin( MAX_TURN_PERPENDICULAR_FORCE / fric_f_mag ) ) * 
 		plyr.control.turn_fact / fabs( plyr.control.turn_fact );
--- ./src/hier_util.cpp.vanilla	2005-02-27 18:14:22.038760200 +0100
+++ ./src/hier_util.cpp	2005-02-27 18:14:42.123706824 +0100
@@ -250,7 +250,7 @@
     pp::Vec3d normal, v1, v2;
     double old_len;
 
-    check_assertion( p.num_vertices > 2, "number of vertices must be > 2" );
+//    check_assertion( p.num_vertices > 2, "number of vertices must be > 2" );
 
     v1 = v[p.vertices[1]] - v[p.vertices[0]];
     v2 = v[p.vertices[p.numVertices-1]] - v[p.vertices[0]];
--- ./src/ppgltk/audio/audio_data.cpp.vanilla	2005-02-27 18:02:43.376972936 +0100
+++ ./src/ppgltk/audio/audio_data.cpp	2005-02-27 18:07:37.106319288 +0100
@@ -123,9 +123,10 @@
 	
 
     /* Make sure it's there */
-    check_assertion( get_hash_entry( hash, name, (void*) &temp_record_ptr ) &&
+/*    check_assertion( get_hash_entry( hash, name, (void*) &temp_record_ptr ) &&
 		     ( record_ptr == temp_record_ptr ), 
 		     "failed addition to hash table" );
+*/
     temp_record_ptr = NULL; /* to prevent warnings when assert turned off */
 
 	sound_dirty_ = true;
@@ -209,9 +210,10 @@
     musicTable[name] = *mrec;
 
     /* Make sure it's there */
-    check_assertion( get_hash_entry( hash, name, (void*) &temp_record_ptr ) &&
+/*    check_assertion( get_hash_entry( hash, name, (void*) &temp_record_ptr ) &&
 		     ( record_ptr == temp_record_ptr ), 
 		     "failed addition to hash table" );
+*/
     temp_record_ptr = NULL; /* to prevent warnings when assert turned off */
 
 
@@ -333,7 +335,7 @@
 {
    	std::map<std::string,sound_record_t>::iterator srec;
 	if((srec=soundTable.find(name))==soundTable.end()){
-		check_assertion( found, "hashtable entry not found" );
+	//	check_assertion( found, "hashtable entry not found" );
 	}
 	
 	srec->second.ref_ctr++;
@@ -355,7 +357,7 @@
 {
    	std::map<std::string,sound_record_t>::iterator srec;
 	if((srec=soundTable.find(name))==soundTable.end()){
-		check_assertion( found, "hashtable entry not found" );
+//		check_assertion( found, "hashtable entry not found" );
 	}
 	
 	srec->second.ref_ctr--;
@@ -461,7 +463,7 @@
 bool
 is_sound_data_dirty()
 {
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     return sound_dirty_;
 }
@@ -481,7 +483,7 @@
 bool
 is_music_data_dirty()
 {
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     return music_dirty_;
 }
@@ -499,7 +501,7 @@
 void
 mark_sound_data_clean()
 {
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     sound_dirty_ = false;
 }
@@ -517,7 +519,7 @@
 void
 mark_music_data_clean()
 {
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     music_dirty_ = false;
 }
@@ -537,7 +539,7 @@
 {
     Tcl_Obj *result;
 
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     if ( argc != 3 ) {
         Tcl_AppendResult(ip, argv[0], ": invalid number of arguments\n", 
@@ -565,7 +567,7 @@
 {
     Tcl_Obj *result;
 
-    check_assertion( initialized_, "audio_data module not initialized" );
+    //check_assertion( initialized_, "audio_data module not initialized" );
 
     if ( argc != 3 ) {
         Tcl_AppendResult(ip, argv[0], ": invalid number of arguments\n", 
