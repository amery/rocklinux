# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
#
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
#
# ROCK Linux: rock-src/package/base/linux/linux26/12-conf-hacks.patch
# ROCK Linux is Copyright (C) 1998 - 2006 Clifford Wolf
#
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# --- ROCK-COPYRIGHT-NOTE-END ---

Set all unset options to module. Needed by the ROCK Linux kernel
configuration.

Initally written by Clifford Wolf <clifford@clifford.at> and adapted
for various new 2.5/2.6 kernels by Rene Rebe <rene.rebe@gmx.net>.

--- ./scripts/kconfig/conf.c.vanilla	2006-01-10 17:29:02.000000000 +0100
+++ ./scripts/kconfig/conf.c	2006-01-10 17:33:34.000000000 +0100
@@ -20,6 +20,7 @@
 	ask_all,
 	ask_new,
 	ask_silent,
+	ask_no2mod,
 	set_default,
 	set_yes,
 	set_mod,
@@ -91,6 +92,15 @@
 			return;
 		}
 		break;
+       case ask_no2mod:
+               if (type == S_TRISTATE &&
+                   sym_get_tristate_value(sym) == no) {
+                       fprintf(stderr, "Setting %s to 'm'.\n", sym->name);
+                       line[0] = 'm';
+                       line[1] = '\n';
+                       line[2] = 0;
+                       break;
+               }
 	case ask_new:
 	case ask_silent:
 		if (sym_has_value(sym)) {
@@ -354,6 +364,7 @@
 				break;
 			}
 			check_stdin();
+		case ask_no2mod:
 		case ask_all:
 			fflush(stdout);
 			fgets(line, 128, stdin);
@@ -523,6 +534,9 @@
 		case 'm':
 			input_mode = set_mod;
 			break;
+		case 'M':
+			input_mode = ask_no2mod;
+			break;
 		case 'y':
 			input_mode = set_yes;
 			break;
@@ -565,6 +579,7 @@
 		}
 	case ask_all:
 	case ask_new:
+	case ask_no2mod:
 		conf_read(NULL);
 		break;
 	case set_no:
--- ./scripts/kconfig/Makefile.vanilla	2006-01-10 17:29:25.000000000 +0100
+++ ./scripts/kconfig/Makefile	2006-01-10 17:29:45.000000000 +0100
@@ -42,7 +42,7 @@
 	$(Q)rm -f arch/um/Kconfig_arch
 	$(Q)rm -f scripts/kconfig/linux_*.pot scripts/kconfig/config.pot
 
-.PHONY: randconfig allyesconfig allnoconfig allmodconfig defconfig
+.PHONY: randconfig allyesconfig allnoconfig allmodconfig no2modconfig defconfig
 
 randconfig: $(obj)/conf
 	$< -r arch/$(ARCH)/Kconfig
@@ -56,6 +56,9 @@
 allmodconfig: $(obj)/conf
 	$< -m arch/$(ARCH)/Kconfig
 
+no2modconfig: scripts/kconfig/conf
+	$< -M arch/$(ARCH)/Kconfig
+
 defconfig: $(obj)/conf
 ifeq ($(KBUILD_DEFCONFIG),)
 	$< -d arch/$(ARCH)/Kconfig
@@ -77,6 +80,7 @@
 	@echo  '  randconfig	  - New config with random answer to all options'
 	@echo  '  defconfig	  - New config with default answer to all options'
 	@echo  '  allmodconfig	  - New config selecting modules when possible'
+	@echo  '  no2modconfig    - New config selecting modules for disabled options'
 	@echo  '  allyesconfig	  - New config where all options are accepted with yes'
 	@echo  '  allnoconfig	  - New minimal config'
 
